// Code generated by MockGen. DO NOT EDIT.
// Source: clients/naming_client/naming_client_interface.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	model "github.com/nacos-group/nacos-sdk-go/model"
	vo "github.com/nacos-group/nacos-sdk-go/vo"
	reflect "reflect"
)

// MockINamingClient is a mock of INamingClient interface
type MockINamingClient struct {
	ctrl     *gomock.Controller
	recorder *MockINamingClientMockRecorder
}

// MockINamingClientMockRecorder is the mock recorder for MockINamingClient
type MockINamingClientMockRecorder struct {
	mock *MockINamingClient
}

// NewMockINamingClient creates a new mock instance
func NewMockINamingClient(ctrl *gomock.Controller) *MockINamingClient {
	mock := &MockINamingClient{ctrl: ctrl}
	mock.recorder = &MockINamingClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockINamingClient) EXPECT() *MockINamingClientMockRecorder {
	return m.recorder
}

// RegisterServiceInstance mocks base method
func (m *MockINamingClient) RegisterServiceInstance(param vo.RegisterServiceInstanceParam) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterServiceInstance", param)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterServiceInstance indicates an expected call of RegisterServiceInstance
func (mr *MockINamingClientMockRecorder) RegisterServiceInstance(param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterServiceInstance", reflect.TypeOf((*MockINamingClient)(nil).RegisterServiceInstance), param)
}

// LogoutServiceInstance mocks base method
func (m *MockINamingClient) LogoutServiceInstance(param vo.LogoutServiceInstanceParam) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogoutServiceInstance", param)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LogoutServiceInstance indicates an expected call of LogoutServiceInstance
func (mr *MockINamingClientMockRecorder) LogoutServiceInstance(param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogoutServiceInstance", reflect.TypeOf((*MockINamingClient)(nil).LogoutServiceInstance), param)
}

// GetService mocks base method
func (m *MockINamingClient) GetService(param vo.GetServiceParam) (model.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetService", param)
	ret0, _ := ret[0].(model.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetService indicates an expected call of GetService
func (mr *MockINamingClientMockRecorder) GetService(param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetService", reflect.TypeOf((*MockINamingClient)(nil).GetService), param)
}

// GetServiceInstance mocks base method
func (m *MockINamingClient) GetServiceInstance(param vo.GetServiceInstanceParam) (model.ServiceInstance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceInstance", param)
	ret0, _ := ret[0].(model.ServiceInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceInstance indicates an expected call of GetServiceInstance
func (mr *MockINamingClientMockRecorder) GetServiceInstance(param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceInstance", reflect.TypeOf((*MockINamingClient)(nil).GetServiceInstance), param)
}

// GetServiceDetail mocks base method
func (m *MockINamingClient) GetServiceDetail(param vo.GetServiceDetailParam) (model.ServiceDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceDetail", param)
	ret0, _ := ret[0].(model.ServiceDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceDetail indicates an expected call of GetServiceDetail
func (mr *MockINamingClientMockRecorder) GetServiceDetail(param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceDetail", reflect.TypeOf((*MockINamingClient)(nil).GetServiceDetail), param)
}

// Subscribe mocks base method
func (m *MockINamingClient) Subscribe(param *vo.SubscribeParam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", param)
	ret0, _ := ret[0].(error)
	return ret0
}

// Subscribe indicates an expected call of Subscribe
func (mr *MockINamingClientMockRecorder) Subscribe(param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockINamingClient)(nil).Subscribe), param)
}

// Unsubscribe mocks base method
func (m *MockINamingClient) Unsubscribe(param *vo.SubscribeParam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unsubscribe", param)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unsubscribe indicates an expected call of Unsubscribe
func (mr *MockINamingClientMockRecorder) Unsubscribe(param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockINamingClient)(nil).Unsubscribe), param)
}
